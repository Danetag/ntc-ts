{"version":3,"file":"bundle.js","sources":["../src/colors/minimal.ts","../src/ntc.ts","index.js"],"sourcesContent":["import { COLOR } from '../types'\n\nexport const MINIMAL_COLORS: COLOR[] = [\n  ['000000', 'Black'],\n  ['0000FF', 'Blue'],\n  ['00FF00', 'Green'],\n  ['00FFFF', 'Cyan / Aqua'],\n  ['315BA1', 'Azure'],\n  ['370202', 'Chocolate'],\n  ['483C32', 'Taupe'],\n  ['4F69C6', 'Indigo'],\n  ['660099', 'Purple'],\n  ['706555', 'Coffee'],\n  ['888D65', 'Avocado'],\n  ['967BB6', 'Lavender Purple'],\n  ['A9C6C2', 'Opal'],\n  ['AF8F2C', 'Alpine'],\n  ['DA3287', 'Cerise'],\n  ['EB9373', 'Apricot'],\n  ['ED9121', 'Carrot Orange'],\n  ['F5F5DC', 'Beige'],\n  ['FDE910', 'Lemon'],\n  ['FF0000', 'Red'],\n  ['FF007F', 'Rose'],\n  ['FF00FF', 'Magenta / Fuchsia'],\n  ['FF681F', 'Orange'],\n  ['FF69B4', 'Hot Pink'],\n  ['FF7F50', 'Coral'],\n  ['FF8C69', 'Salmon'],\n  ['FFC0CB', 'Pink'],\n  ['FFDB58', 'Mustard'],\n  ['FFDDAF', 'Caramel'],\n  ['FFE5B4', 'Peach'],\n  ['FFFDD0', 'Cream'],\n  ['FFFF00', 'Yellow'],\n  ['FFFFF0', 'Ivory'],\n  ['FFFFFF', 'White']\n]\n","import { CACHED_COLOR, COLOR, FORMATTED_COLOR } from './types'\n\nexport let cachedColors: CACHED_COLOR = {}\nexport let colors: COLOR[] = [['000000', 'Black']]\n\nexport const NOT_A_COLOR = 'not-a-color'\n\nfunction getRGB (color: string, divider = 1): number[] {\n  return [\n    parseInt(`0x${color.substring(1, 3)}`, 16) / divider,\n    parseInt(`0x${color.substring(3, 5)}`, 16) / divider,\n    parseInt(`0x${color.substring(5, 7)}`, 16) / divider\n  ]\n}\n\nfunction getHSL (color: string): number[] {\n  const rgb = getRGB(color, 255)\n\n  const r = rgb[0]\n  const g = rgb[1]\n  const b = rgb[2]\n\n  const min = Math.min(r, Math.min(g, b))\n  const max = Math.max(r, Math.max(g, b))\n  const delta = max - min\n\n  let h = 0\n  let s = 0\n  const l = (min + max) / 2\n\n  if (l > 0 && l < 1) {\n    s = delta / (l < 0.5 ? (2 * l) : (2 - 2 * l))\n  }\n\n  if (delta > 0) {\n    if (max === r && max !== g) h += (g - b) / delta\n    if (max === g && max !== b) h += (2 + (b - r) / delta)\n    if (max === b && max !== r) h += (4 + (r - g) / delta)\n    h /= 6\n  }\n\n  return [Math.round(h * 255), Math.round(s * 255), Math.round(l * 255)]\n}\n\nfunction formatColor (rgb: string | null, colorName: string, exactMatch = false): FORMATTED_COLOR {\n  return {\n    exactMatch,\n    name: colorName,\n    rgb\n  }\n}\n\nexport function initColors (_colors: COLOR[]): void {\n  colors = [..._colors]\n  flushCachedColors()\n}\n\nexport function flushCachedColors (): void {\n  cachedColors = { ...{} }\n}\n\nexport function getColorName (color?: string): FORMATTED_COLOR {\n  if (typeof color === 'undefined' || color === null) {\n    return formatColor(null, NOT_A_COLOR, false)\n  }\n\n  color = color.toUpperCase()\n\n  // Not a valid color\n  if (color.length < 3 || color.length > 7) {\n    return formatColor(null, NOT_A_COLOR, false)\n  }\n\n  // Missing #\n  if (color.length % 3 === 0) {\n    color = `#${color}`\n  }\n\n  if (color.length === 4) {\n    color = `#${color.substr(1, 1)}${color.substr(1, 1)}${color.substr(2, 1)}${color.substr(2, 1)}${color.substr(3, 1)}${color.substr(3, 1)}`\n  }\n\n  // See if color has been found yet\n  if (typeof cachedColors[color] !== 'undefined') {\n    return cachedColors[color]\n  }\n\n  const rgb = getRGB(color)\n  const r = rgb[0]\n  const g = rgb[1]\n  const b = rgb[2]\n\n  const hsl = getHSL(color)\n  const h = hsl[0]\n  const s = hsl[1]\n  const l = hsl[2]\n\n  let ndf1 = 0\n  let ndf2 = 0\n  let ndf = 0\n\n  let cl = -1\n  let df = -1\n\n  // Find in names\n  for (let i = 0; i < colors.length; i++) {\n    let currentColor = colors[i]\n    const currentHexColor = `#${currentColor[0]}`\n    const currentNameColor = String(currentColor[1])\n\n    // Add RGB/HSL if missing\n    if (typeof currentColor[2] === 'undefined') {\n      const currentRgbColor = getRGB(currentHexColor)\n      const currentHslColor = getHSL(currentHexColor)\n\n      currentColor = currentColor.concat(currentRgbColor)\n      currentColor = currentColor.concat(currentHslColor)\n    }\n\n    // Exact match\n    if (color === currentHexColor) {\n      // add to cached color\n      cachedColors[color] = formatColor(currentHexColor, currentNameColor, true)\n      return cachedColors[color]\n    }\n\n    const cR: number = parseInt(String(currentColor[2]), 10)\n    const cG: number = parseInt(String(currentColor[3]), 10)\n    const cB: number = parseInt(String(currentColor[4]), 10)\n\n    const cH: number = parseInt(String(currentColor[5]), 10)\n    const cS: number = parseInt(String(currentColor[6]), 10)\n    const cL: number = parseInt(String(currentColor[7]), 10)\n\n    ndf1 = Math.pow(r - cR, 2) + Math.pow(g - cG, 2) + Math.pow(b - cB, 2)\n    ndf2 = Math.pow(h - cH, 2) + Math.pow(s - cS, 2) + Math.pow(l - cL, 2)\n\n    ndf = ndf1 + ndf2 * 2\n\n    if (df < 0 || df > ndf) {\n      df = ndf\n      cl = i\n    }\n  }\n\n  // Not found\n  if (cl < 0) {\n    return formatColor(color, color, false)\n  }\n\n  const currentColor = colors[cl]\n  const currentHexColor = `#${currentColor[0]}`\n  const currentNameColor = String(currentColor[1])\n\n  // add to cached color\n  cachedColors[color] = formatColor(currentHexColor, currentNameColor, false)\n\n  return cachedColors[color]\n}\n","import { getColorName, initColors, MINIMAL_COLORS } from \"../dist/ntc-ts.modern\"\n\ninitColors(MINIMAL_COLORS);\nconst color = getColorName('#F89EAB');\n\nconsole.log('color for #F89EAB', color)"],"names":["MINIMAL_COLORS","cachedColors","colors","getRGB","color","divider","parseInt","substring","getHSL","rgb","r","g","b","min","Math","max","delta","h","s","l","round","formatColor","colorName","exactMatch","name","initColors","_colors","flushCachedColors","_extends","getColorName","toUpperCase","length","substr","hsl","ndf1","ndf2","ndf","cl","df","i","_currentColor","_currentHexColor","currentColor","currentNameColor","String","currentRgbColor","currentHexColor","currentHslColor","concat","cR","cG","cB","cH","cS","cL","pow"],"mappings":"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"}